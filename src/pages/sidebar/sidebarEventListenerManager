import createProjectPage from "../project";
import sidebarUtils from "./sidebarUtilitiesManager";
import * as utils from '../utils';

const sidebarEventListenerManager = {
  closeSidebarOnItemClick() {
    let allSidebarItems = document.querySelectorAll('.sidebar-item');
    let allProjectsListItems = document.querySelectorAll('.projects-list-item');
  
    allSidebarItems.forEach((sidebarItem) => {
      sidebarItem.addEventListener('click', () => {
        hideSidebarDialog();
      });
    })
  
    allProjectsListItems.forEach((projectsListitem) => {
      projectsListitem.addEventListener('click', () => {
        hideSidebarDialog();
      })
    })
  },

  goToProjectPageOnProjectItemClick() {
    let allProjectsListItems = document.querySelectorAll('.projects-list-item');
    
    Array.from(allProjectsListItems).forEach((projectItem) => {
      projectItem.addEventListener('click', () => {
        utils.removeAllElementsExceptFooterAndSidebar();
        createProjectPage(projectItem.dataset.projectName);
      });
    })
  },

  activateNewProjectItemClick() {
    let projectsList = document.querySelector('.projects-list');
    let newProjectItem = projectsList.lastChild;

    newProjectItem.addEventListener('click', () => {
      utils.removeAllElementsExceptFooterAndSidebar();
      createProjectPage(newProjectItem.dataset.projectName);
      hideSidebarDialog();
    });
  },
  
  handleSidebarDialogOutsideClick() {
    let dialog = document.querySelector('.sidebar-dialog');
  
    let isMouseOutsideModal = false;
  
    dialog.addEventListener("mousedown", (event) => {
      const dialogDimensions = dialog.getBoundingClientRect();
      if (
        event.clientX < dialogDimensions.left ||
        event.clientX > dialogDimensions.right ||
        event.clientY < dialogDimensions.top ||
        event.clientY > dialogDimensions.bottom
      ) {
        isMouseOutsideModal = true;
      } else {
        isMouseOutsideModal = false;
      }
    });
  
    dialog.addEventListener("mouseup", (event) => {
      const modalArea = dialog.getBoundingClientRect();
      // console.log(isMouseOutsideModal);
      if (isMouseOutsideModal && 
        (event.clientX < modalArea.left ||
        event.clientX > modalArea.right ||
        event.clientY < modalArea.top ||
        event.clientY > modalArea.bottom)) {
        isMouseOutsideModal = false;
        hideSidebarDialog();
      }
    });
    
  },

  setSidebarSVGColors(sidebarItemSVG) {
    sidebarItemSVG.addEventListener('load', () => {
      const svgIframeWindow = sidebarItemSVG.contentWindow;
      const svgIframeDocument = svgIframeWindow.document;
  
      // Access and manipulate SVG elements within the iframe as needed
      const pathElement = svgIframeDocument.querySelector('svg');
      // pathElement.style.fill = "red"; // Change the fill color to blue
  
      if (sidebarItemSVG.classList.contains('inbox-svg')) {
        pathElement.style.fill = 'blue';
      } else if (sidebarItemSVG.classList.contains('today-svg')) {
        pathElement.style.fill = 'green'
      } else if (sidebarItemSVG.classList.contains('upcoming-svg')) {
        pathElement.style.fill = 'purple'
      }
    })
  },

  activateAddProjectButton() {
    let addProjectButton = document.querySelector('.add-project-button');
    let addProjectDialog = document.querySelector('.add-project-dialog');
  
    addProjectButton.addEventListener('click', () => {
      addProjectDialog.showModal();
    });
  },
  
  activateAddProjectDialogActionButtons() {
    let addProjectDialog = document.querySelector('.add-project-dialog');
    let addProjectForm = document.querySelector('.add-project-form');
    let cancelButton = document.querySelector('.add-project-dialog-cancel-button')
    let confirmButton = document.querySelector('.add-project-dialog-confirm-button')
    let nameInput = document.querySelector('.add-project-dialog-name-input');
    
    cancelButton.addEventListener('click', () => {
      addProjectDialog.close();
      sidebarUtils.clearAddProjectForm();
    });
    
    addProjectForm.addEventListener('submit', (e) => {
      e.preventDefault();
      let nameInput = document.querySelector('.add-project-dialog-name-input');
      let projectList = JSON.parse(localStorage.getItem('projectsList'));
  
      if (sidebarUtils.projectNameExists(nameInput.value)) {
        nameInput.setCustomValidity('The project name already exists. Please enter a different name.');
        nameInput.reportValidity();
        return;
      }
  
      if (projectList !== null) {
        projectList.push(nameInput.value);
        localStorage.setItem('projectsList', JSON.stringify(projectList));
        sidebarUtils.clearAddProjectForm();
        sidebarUtils.updateSidebarProjectsList();
      } else {
        projectList = ['Home'];
        projectList.push(nameInput.value);
        localStorage.setItem('projectsList', JSON.stringify(projectList));
        sidebarUtils.updateSidebarProjectsList();
      }
      const projectAddedToLocalStorage = new Event('projectAddedToLocalStorage');
      window.dispatchEvent(projectAddedToLocalStorage);
      addProjectDialog.close();
    });
  
    // remove error message if one is displayed while user is typing
    nameInput.addEventListener('input', (e) => {
      if (e.target.validity.customError) {
        e.target.setCustomValidity('');
      } 
    });
  }

}

function hideSidebarDialog() {
  let sidebarDialog = document.querySelector('.sidebar-dialog');
  sidebarDialog.classList.add('hide');
  sidebarDialog.addEventListener('animationend', dialogAnimationEnd);
}

function dialogAnimationEnd() {
  let dialog = document.querySelector('.sidebar-dialog');
  dialog.close();
  dialog.classList.remove('hide');
  dialog.removeEventListener('animationend', dialogAnimationEnd);
}

export default sidebarEventListenerManager;